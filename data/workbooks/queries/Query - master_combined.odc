<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/x-ms-odc; charset=utf-8">
<meta name=ProgId content=ODC.Database>
<meta name=SourceType content=OLEDB>
<title>Query - master_combined</title>
<xml id=docprops><o:DocumentProperties
  xmlns:o="urn:schemas-microsoft-com:office:office"
  xmlns="http://www.w3.org/TR/REC-html40">
  <o:Description>Connection to the 'master_combined' query in the workbook.</o:Description>
  <o:Name>Query - master_combined</o:Name>
 </o:DocumentProperties>
</xml><xml id=msodc><odc:OfficeDataConnection
  xmlns:odc="urn:schemas-microsoft-com:office:odc"
  xmlns="http://www.w3.org/TR/REC-html40">
  <odc:PowerQueryConnection odc:Type="OLEDB">
   <odc:ConnectionString>Provider=Microsoft.Mashup.OleDb.1;Data Source=$Workbook$;Location=master_combined;Extended Properties=&quot;&quot;</odc:ConnectionString>
   <odc:CommandType>SQL</odc:CommandType>
   <odc:CommandText>SELECT * FROM [master_combined]</odc:CommandText>
  </odc:PowerQueryConnection>
  <odc:PowerQueryMashupData>&lt;Mashup xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns=&quot;http://schemas.microsoft.com/DataMashup&quot;&gt;&lt;Client&gt;EXCEL&lt;/Client&gt;&lt;Version&gt;2.108.986.0&lt;/Version&gt;&lt;MinVersion&gt;2.21.0.0&lt;/MinVersion&gt;&lt;Culture&gt;en-US&lt;/Culture&gt;&lt;SafeCombine&gt;true&lt;/SafeCombine&gt;&lt;Items&gt;&lt;Query Name=&quot;combined_header&quot;&gt;&lt;Formula&gt;&lt;![CDATA[let&#13;&#10;  Source = Excel.CurrentWorkbook(){[Name = &quot;dynpath_header&quot;]}[Content],&#13;&#10;  Path = Source{0}[FullPath] ,&#13;&#10;  GetFiles = Csv.Document(File.Contents(Path),[Delimiter=&quot;,&quot;, Columns=11, Encoding=1252, QuoteStyle=QuoteStyle.None]),&#13;&#10;    #&quot;Changed Type&quot; = Table.TransformColumnTypes(GetFiles,{{&quot;Column1&quot;, type text}, {&quot;Column2&quot;, type text}, {&quot;Column3&quot;, type text}, {&quot;Column4&quot;, type text}, {&quot;Column5&quot;, type text}, {&quot;Column6&quot;, type text}, {&quot;Column7&quot;, type text}, {&quot;Column8&quot;, type text}, {&quot;Column9&quot;, type text}, {&quot;Column10&quot;, type text}, {&quot;Column11&quot;, type text}})&#13;&#10;in&#13;&#10;    #&quot;Changed Type&quot;]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;Query Name=&quot;master_combined&quot;&gt;&lt;Formula&gt;&lt;![CDATA[let&#13;&#10;    Source = combined_header,&#13;&#10;    #&quot;Appended Query&quot; = Table.Combine({Source, master_data_futd, master_data_futf}),&#13;&#10;    #&quot;Promoted Headers&quot; = Table.PromoteHeaders(#&quot;Appended Query&quot;, [PromoteAllScalars=true]),&#13;&#10;    #&quot;Changed Type&quot; = Table.TransformColumnTypes(#&quot;Promoted Headers&quot;,{{&quot;Market_and_Exchange_Names&quot;, type text}, {&quot;Report_Date_as_MM_DD_YYYY&quot;, type date}, {&quot;Prod_Merc_or_Dealer_Positions_Long_All&quot;, Int64.Type}, {&quot;Prod_Merc_or_Dealer_Positions_Short_All&quot;, Int64.Type}, {&quot;Swap_or_Asset_Mgr_Positions_Long_All&quot;, Int64.Type}, {&quot;Swap_or_Asset_Mgr_Positions_Short_All&quot;, Int64.Type}, {&quot;Swap_or_Asset_Mgr_Positions_Spread_All&quot;, Int64.Type}, {&quot;M_Money_or_Lev_Money_Positions_Long_All&quot;, Int64.Type}, {&quot;M_Money_or_Lev_Money_Positions_Short_All&quot;, Int64.Type}, {&quot;Other_Rept_Positions_Long_All&quot;, Int64.Type}, {&quot;Other_Rept_Positions_Short_All&quot;, Int64.Type}}),&#13;&#10;    #&quot;Spec Long Rule&quot; = Table.AddColumn(#&quot;Changed Type&quot;, &quot;Spec_Long&quot;, each [M_Money_or_Lev_Money_Positions_Long_All] + [Other_Rept_Positions_Long_All]),&#13;&#10;    #&quot;Spec Short Rule&quot; = Table.AddColumn(#&quot;Spec Long Rule&quot;, &quot;Spec_Short&quot;, each [M_Money_or_Lev_Money_Positions_Short_All] + [Other_Rept_Positions_Short_All]),&#13;&#10;    #&quot;Spec Net Rule&quot; = Table.AddColumn(#&quot;Spec Short Rule&quot;, &quot;Spec_Net&quot;, each [Spec_Long] - [Spec_Short]),&#13;&#10;    #&quot;Comm Long Rule&quot; = Table.AddColumn(#&quot;Spec Net Rule&quot;, &quot;Commercial_Long&quot;, each [Prod_Merc_or_Dealer_Positions_Long_All] + [Swap_or_Asset_Mgr_Positions_Long_All] + [Swap_or_Asset_Mgr_Positions_Spread_All]),&#13;&#10;    #&quot;Comm Short Rule&quot; = Table.AddColumn(#&quot;Comm Long Rule&quot;, &quot;Commercial_Short&quot;, each [Prod_Merc_or_Dealer_Positions_Short_All] + [Swap_or_Asset_Mgr_Positions_Short_All] + [Swap_or_Asset_Mgr_Positions_Spread_All]),&#13;&#10;    #&quot;Comm Net Rule&quot; = Table.AddColumn(#&quot;Comm Short Rule&quot;, &quot;Commercial_Net&quot;, each [Commercial_Long] - [Commercial_Short]),&#13;&#10;    #&quot;Comm Net Abs Value&quot; = Table.TransformColumns(#&quot;Comm Net Rule&quot;,{{&quot;Commercial_Net&quot;, Number.Abs, type number}}),&#13;&#10;    #&quot;Comm Net Data Type Conv&quot; = Table.TransformColumnTypes(#&quot;Comm Net Abs Value&quot;,{{&quot;Commercial_Net&quot;, Int64.Type}}),&#13;&#10;    #&quot;Sort Report Date Desc&quot; = Table.Sort(#&quot;Comm Net Data Type Conv&quot;,{{&quot;Report_Date_as_MM_DD_YYYY&quot;, Order.Descending}})&#13;&#10;in&#13;&#10;    #&quot;Sort Report Date Desc&quot;]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;Query Name=&quot;master_data_futd&quot;&gt;&lt;Formula&gt;&lt;![CDATA[let&#13;&#10;  Source = Excel.CurrentWorkbook(){[Name = &quot;dynpath_futd&quot;]}[Content],&#13;&#10;  Path = Source{0}[FullPath] ,&#13;&#10;  GetFiles = Csv.Document(File.Contents(Path),[Delimiter=&quot;,&quot;, Columns=191, Encoding=1252, QuoteStyle=QuoteStyle.None]),&#13;&#10;    #&quot;Promoted Headers&quot; = Table.PromoteHeaders(GetFiles, [PromoteAllScalars=true]),&#13;&#10;    #&quot;Market Filters (Optimized)&quot; = Table.SelectRows(#&quot;Promoted Headers&quot;, each ([Market_and_Exchange_Names] = &quot;CORN - CHICAGO BOARD OF TRADE&quot; or [Market_and_Exchange_Names] = &quot;CORN - CHICAGO BOARD OF TRADE &quot; or [Market_and_Exchange_Names] = &quot;GOLD - COMMODITY EXCHANGE INC.&quot; or [Market_and_Exchange_Names] = &quot;GOLD - COMMODITY EXCHANGE INC. &quot; or [Market_and_Exchange_Names] = &quot;SOYBEANS - CHICAGO BOARD OF TRADE&quot; or [Market_and_Exchange_Names] = &quot;SOYBEANS - CHICAGO BOARD OF TRADE &quot; or [Market_and_Exchange_Names] = &quot;WHEAT-HRW - CHICAGO BOARD OF TRADE&quot; or [Market_and_Exchange_Names] = &quot;WHEAT-HRW - CHICAGO BOARD OF TRADE &quot; or [Market_and_Exchange_Names] = &quot;WHEAT-SRW - CHICAGO BOARD OF TRADE&quot; or [Market_and_Exchange_Names] = &quot;WHEAT-SRW - CHICAGO BOARD OF TRADE &quot; or [Market_and_Exchange_Names] = &quot;WTI-PHYSICAL - NEW YORK MERCANTILE EXCHANGE&quot;)),&#13;&#10;    #&quot;Changed Type&quot; = Table.TransformColumnTypes(#&quot;Market Filters (Optimized)&quot;,{{&quot;Market_and_Exchange_Names&quot;, type text}, {&quot;As_of_Date_In_Form_YYMMDD&quot;, Int64.Type}, {&quot;Report_Date_as_MM_DD_YYYY&quot;, type date}, {&quot;CFTC_Contract_Market_Code&quot;, Int64.Type}, {&quot;CFTC_Market_Code&quot;, type text}, {&quot;CFTC_Region_Code&quot;, Int64.Type}, {&quot;CFTC_Commodity_Code&quot;, Int64.Type}, {&quot;Open_Interest_All&quot;, Int64.Type}, {&quot;Prod_Merc_Positions_Long_All&quot;, Int64.Type}, {&quot;Prod_Merc_Positions_Short_All&quot;, Int64.Type}, {&quot;Swap_Positions_Long_All&quot;, Int64.Type}, {&quot;Swap__Positions_Short_All&quot;, Int64.Type}, {&quot;Swap__Positions_Spread_All&quot;, Int64.Type}, {&quot;M_Money_Positions_Long_All&quot;, Int64.Type}, {&quot;M_Money_Positions_Short_All&quot;, Int64.Type}, {&quot;M_Money_Positions_Spread_All&quot;, Int64.Type}, {&quot;Other_Rept_Positions_Long_All&quot;, Int64.Type}, {&quot;Other_Rept_Positions_Short_All&quot;, Int64.Type}, {&quot;Other_Rept_Positions_Spread_All&quot;, Int64.Type}, {&quot;Tot_Rept_Positions_Long_All&quot;, Int64.Type}, {&quot;Tot_Rept_Positions_Short_All&quot;, Int64.Type}, {&quot;NonRept_Positions_Long_All&quot;, Int64.Type}, {&quot;NonRept_Positions_Short_All&quot;, Int64.Type}, {&quot;Open_Interest_Old&quot;, Int64.Type}, {&quot;Prod_Merc_Positions_Long_Old&quot;, Int64.Type}, {&quot;Prod_Merc_Positions_Short_Old&quot;, Int64.Type}, {&quot;Swap_Positions_Long_Old&quot;, Int64.Type}, {&quot;Swap__Positions_Short_Old&quot;, Int64.Type}, {&quot;Swap__Positions_Spread_Old&quot;, Int64.Type}, {&quot;M_Money_Positions_Long_Old&quot;, Int64.Type}, {&quot;M_Money_Positions_Short_Old&quot;, Int64.Type}, {&quot;M_Money_Positions_Spread_Old&quot;, Int64.Type}, {&quot;Other_Rept_Positions_Long_Old&quot;, Int64.Type}, {&quot;Other_Rept_Positions_Short_Old&quot;, Int64.Type}, {&quot;Other_Rept_Positions_Spread_Old&quot;, Int64.Type}, {&quot;Tot_Rept_Positions_Long_Old&quot;, Int64.Type}, {&quot;Tot_Rept_Positions_Short_Old&quot;, Int64.Type}, {&quot;NonRept_Positions_Long_Old&quot;, Int64.Type}, {&quot;NonRept_Positions_Short_Old&quot;, Int64.Type}, {&quot;Open_Interest_Other&quot;, Int64.Type}, {&quot;Prod_Merc_Positions_Long_Other&quot;, Int64.Type}, {&quot;Prod_Merc_Positions_Short_Other&quot;, Int64.Type}, {&quot;Swap_Positions_Long_Other&quot;, Int64.Type}, {&quot;Swap__Positions_Short_Other&quot;, Int64.Type}, {&quot;Swap__Positions_Spread_Other&quot;, Int64.Type}, {&quot;M_Money_Positions_Long_Other&quot;, Int64.Type}, {&quot;M_Money_Positions_Short_Other&quot;, Int64.Type}, {&quot;M_Money_Positions_Spread_Other&quot;, Int64.Type}, {&quot;Other_Rept_Positions_Long_Other&quot;, Int64.Type}, {&quot;Other_Rept_Positions_Short_Other&quot;, Int64.Type}, {&quot;Other_Rept_Positions_Spread_Other&quot;, Int64.Type}, {&quot;Tot_Rept_Positions_Long_Other&quot;, Int64.Type}, {&quot;Tot_Rept_Positions_Short_Other&quot;, Int64.Type}, {&quot;NonRept_Positions_Long_Other&quot;, Int64.Type}, {&quot;NonRept_Positions_Short_Other&quot;, Int64.Type}, {&quot;Change_in_Open_Interest_All&quot;, Int64.Type}, {&quot;Change_in_Prod_Merc_Long_All&quot;, Int64.Type}, {&quot;Change_in_Prod_Merc_Short_All&quot;, Int64.Type}, {&quot;Change_in_Swap_Long_All&quot;, Int64.Type}, {&quot;Change_in_Swap_Short_All&quot;, Int64.Type}, {&quot;Change_in_Swap_Spread_All&quot;, Int64.Type}, {&quot;Change_in_M_Money_Long_All&quot;, Int64.Type}, {&quot;Change_in_M_Money_Short_All&quot;, Int64.Type}, {&quot;Change_in_M_Money_Spread_All&quot;, Int64.Type}, {&quot;Change_in_Other_Rept_Long_All&quot;, Int64.Type}, {&quot;Change_in_Other_Rept_Short_All&quot;, Int64.Type}, {&quot;Change_in_Other_Rept_Spread_All&quot;, Int64.Type}, {&quot;Change_in_Tot_Rept_Long_All&quot;, Int64.Type}, {&quot;Change_in_Tot_Rept_Short_All&quot;, Int64.Type}, {&quot;Change_in_NonRept_Long_All&quot;, Int64.Type}, {&quot;Change_in_NonRept_Short_All&quot;, Int64.Type}, {&quot;Pct_of_Open_Interest_All&quot;, Int64.Type}, {&quot;Pct_of_OI_Prod_Merc_Long_All&quot;, type number}, {&quot;Pct_of_OI_Prod_Merc_Short_All&quot;, type number}, {&quot;Pct_of_OI_Swap_Long_All&quot;, type number}, {&quot;Pct_of_OI_Swap_Short_All&quot;, type number}, {&quot;Pct_of_OI_Swap_Spread_All&quot;, type number}, {&quot;Pct_of_OI_M_Money_Long_All&quot;, type number}, {&quot;Pct_of_OI_M_Money_Short_All&quot;, type number}, {&quot;Pct_of_OI_M_Money_Spread_All&quot;, type number}, {&quot;Pct_of_OI_Other_Rept_Long_All&quot;, type number}, {&quot;Pct_of_OI_Other_Rept_Short_All&quot;, type number}, {&quot;Pct_of_OI_Other_Rept_Spread_All&quot;, type number}, {&quot;Pct_of_OI_Tot_Rept_Long_All&quot;, type number}, {&quot;Pct_of_OI_Tot_Rept_Short_All&quot;, type number}, {&quot;Pct_of_OI_NonRept_Long_All&quot;, type number}, {&quot;Pct_of_OI_NonRept_Short_All&quot;, type number}, {&quot;Pct_of_Open_Interest_Old&quot;, Int64.Type}, {&quot;Pct_of_OI_Prod_Merc_Long_Old&quot;, type number}, {&quot;Pct_of_OI_Prod_Merc_Short_Old&quot;, type number}, {&quot;Pct_of_OI_Swap_Long_Old&quot;, type number}, {&quot;Pct_of_OI_Swap_Short_Old&quot;, type number}, {&quot;Pct_of_OI_Swap_Spread_Old&quot;, type number}, {&quot;Pct_of_OI_M_Money_Long_Old&quot;, type number}, {&quot;Pct_of_OI_M_Money_Short_Old&quot;, type number}, {&quot;Pct_of_OI_M_Money_Spread_Old&quot;, type number}, {&quot;Pct_of_OI_Other_Rept_Long_Old&quot;, type number}, {&quot;Pct_of_OI_Other_Rept_Short_Old&quot;, type number}, {&quot;Pct_of_OI_Other_Rept_Spread_Old&quot;, type number}, {&quot;Pct_of_OI_Tot_Rept_Long_Old&quot;, type number}, {&quot;Pct_of_OI_Tot_Rept_Short_Old&quot;, type number}, {&quot;Pct_of_OI_NonRept_Long_Old&quot;, type number}, {&quot;Pct_of_OI_NonRept_Short_Old&quot;, type number}, {&quot;Pct_of_Open_Interest_Other&quot;, Int64.Type}, {&quot;Pct_of_OI_Prod_Merc_Long_Other&quot;, type number}, {&quot;Pct_of_OI_Prod_Merc_Short_Other&quot;, type number}, {&quot;Pct_of_OI_Swap_Long_Other&quot;, type number}, {&quot;Pct_of_OI_Swap_Short_Other&quot;, type number}, {&quot;Pct_of_OI_Swap_Spread_Other&quot;, type number}, {&quot;Pct_of_OI_M_Money_Long_Other&quot;, type number}, {&quot;Pct_of_OI_M_Money_Short_Other&quot;, type number}, {&quot;Pct_of_OI_M_Money_Spread_Other&quot;, type number}, {&quot;Pct_of_OI_Other_Rept_Long_Other&quot;, type number}, {&quot;Pct_of_OI_Other_Rept_Short_Other&quot;, type number}, {&quot;Pct_of_OI_Other_Rept_Spread_Other&quot;, type number}, {&quot;Pct_of_OI_Tot_Rept_Long_Other&quot;, type number}, {&quot;Pct_of_OI_Tot_Rept_Short_Other&quot;, type number}, {&quot;Pct_of_OI_NonRept_Long_Other&quot;, type number}, {&quot;Pct_of_OI_NonRept_Short_Other&quot;, type number}, {&quot;Traders_Tot_All&quot;, Int64.Type}, {&quot;Traders_Prod_Merc_Long_All&quot;, Int64.Type}, {&quot;Traders_Prod_Merc_Short_All&quot;, Int64.Type}, {&quot;Traders_Swap_Long_All&quot;, type text}, {&quot;Traders_Swap_Short_All&quot;, type text}, {&quot;Traders_Swap_Spread_All&quot;, type text}, {&quot;Traders_M_Money_Long_All&quot;, type text}, {&quot;Traders_M_Money_Short_All&quot;, type text}, {&quot;Traders_M_Money_Spread_All&quot;, type text}, {&quot;Traders_Other_Rept_Long_All&quot;, Int64.Type}, {&quot;Traders_Other_Rept_Short_All&quot;, type text}, {&quot;Traders_Other_Rept_Spread_All&quot;, Int64.Type}, {&quot;Traders_Tot_Rept_Long_All&quot;, Int64.Type}, {&quot;Traders_Tot_Rept_Short_All&quot;, Int64.Type}, {&quot;Traders_Tot_Old&quot;, Int64.Type}, {&quot;Traders_Prod_Merc_Long_Old&quot;, type text}, {&quot;Traders_Prod_Merc_Short_Old&quot;, Int64.Type}, {&quot;Traders_Swap_Long_Old&quot;, type text}, {&quot;Traders_Swap_Short_Old&quot;, type text}, {&quot;Traders_Swap_Spread_Old&quot;, type text}, {&quot;Traders_M_Money_Long_Old&quot;, type text}, {&quot;Traders_M_Money_Short_Old&quot;, type text}, {&quot;Traders_M_Money_Spread_Old&quot;, type text}, {&quot;Traders_Other_Rept_Long_Old&quot;, type text}, {&quot;Traders_Other_Rept_Short_Old&quot;, type text}, {&quot;Traders_Other_Rept_Spread_Old&quot;, type text}, {&quot;Traders_Tot_Rept_Long_Old&quot;, Int64.Type}, {&quot;Traders_Tot_Rept_Short_Old&quot;, Int64.Type}, {&quot;Traders_Tot_Other&quot;, Int64.Type}, {&quot;Traders_Prod_Merc_Long_Other&quot;, Int64.Type}, {&quot;Traders_Prod_Merc_Short_Other&quot;, Int64.Type}, {&quot;Traders_Swap_Long_Other&quot;, type text}, {&quot;Traders_Swap_Short_Other&quot;, type text}, {&quot;Traders_Swap_Spread_Other&quot;, type text}, {&quot;Traders_M_Money_Long_Other&quot;, type text}, {&quot;Traders_M_Money_Short_Other&quot;, type text}, {&quot;Traders_M_Money_Spread_Other&quot;, type text}, {&quot;Traders_Other_Rept_Long_Other&quot;, type text}, {&quot;Traders_Other_Rept_Short_Other&quot;, type text}, {&quot;Traders_Other_Rept_Spread_Other&quot;, type text}, {&quot;Traders_Tot_Rept_Long_Other&quot;, Int64.Type}, {&quot;Traders_Tot_Rept_Short_Other&quot;, Int64.Type}, {&quot;Conc_Gross_LE_4_TDR_Long_All&quot;, type number}, {&quot;Conc_Gross_LE_4_TDR_Short_All&quot;, type number}, {&quot;Conc_Gross_LE_8_TDR_Long_All&quot;, type number}, {&quot;Conc_Gross_LE_8_TDR_Short_All&quot;, type number}, {&quot;Conc_Net_LE_4_TDR_Long_All&quot;, type number}, {&quot;Conc_Net_LE_4_TDR_Short_All&quot;, type number}, {&quot;Conc_Net_LE_8_TDR_Long_All&quot;, type number}, {&quot;Conc_Net_LE_8_TDR_Short_All&quot;, type number}, {&quot;Conc_Gross_LE_4_TDR_Long_Old&quot;, type number}, {&quot;Conc_Gross_LE_4_TDR_Short_Old&quot;, type number}, {&quot;Conc_Gross_LE_8_TDR_Long_Old&quot;, type number}, {&quot;Conc_Gross_LE_8_TDR_Short_Old&quot;, type number}, {&quot;Conc_Net_LE_4_TDR_Long_Old&quot;, type number}, {&quot;Conc_Net_LE_4_TDR_Short_Old&quot;, type number}, {&quot;Conc_Net_LE_8_TDR_Long_Old&quot;, type number}, {&quot;Conc_Net_LE_8_TDR_Short_Old&quot;, type number}, {&quot;Conc_Gross_LE_4_TDR_Long_Other&quot;, type number}, {&quot;Conc_Gross_LE_4_TDR_Short_Other&quot;, type number}, {&quot;Conc_Gross_LE_8_TDR_Long_Other&quot;, type number}, {&quot;Conc_Gross_LE_8_TDR_Short_Other&quot;, type number}, {&quot;Conc_Net_LE_4_TDR_Long_Other&quot;, type number}, {&quot;Conc_Net_LE_4_TDR_Short_Other&quot;, type number}, {&quot;Conc_Net_LE_8_TDR_Long_Other&quot;, type number}, {&quot;Conc_Net_LE_8_TDR_Short_Other&quot;, type number}, {&quot;Contract_Units&quot;, type text}, {&quot;CFTC_Contract_Market_Code_Quotes&quot;, Int64.Type}, {&quot;CFTC_Market_Code_Quotes&quot;, type text}, {&quot;CFTC_Commodity_Code_Quotes&quot;, Int64.Type}, {&quot;CFTC_SubGroup_Code&quot;, type text}, {&quot;FutOnly_or_Combined&quot;, type text}}),&#13;&#10;    #&quot;Removed Errors&quot; = Table.RemoveRowsWithErrors(#&quot;Changed Type&quot;, {&quot;Report_Date_as_MM_DD_YYYY&quot;}),&#13;&#10;    #&quot;Removed Other Columns&quot; = Table.SelectColumns(#&quot;Removed Errors&quot;,{&quot;Market_and_Exchange_Names&quot;, &quot;Report_Date_as_MM_DD_YYYY&quot;, &quot;Prod_Merc_Positions_Long_All&quot;, &quot;Prod_Merc_Positions_Short_All&quot;, &quot;Swap_Positions_Long_All&quot;, &quot;Swap__Positions_Short_All&quot;, &quot;Swap__Positions_Spread_All&quot;, &quot;M_Money_Positions_Long_All&quot;, &quot;M_Money_Positions_Short_All&quot;, &quot;Other_Rept_Positions_Long_All&quot;, &quot;Other_Rept_Positions_Short_All&quot;}),&#13;&#10;    #&quot;Lookback Period Filter&quot; = Table.SelectRows(#&quot;Removed Other Columns&quot;, each Date.IsInPreviousNWeeks([Report_Date_as_MM_DD_YYYY], 78)),&#13;&#10;    #&quot;Demoted Headers&quot; = Table.DemoteHeaders(#&quot;Lookback Period Filter&quot;),&#13;&#10;    #&quot;Changed Type1&quot; = Table.TransformColumnTypes(#&quot;Demoted Headers&quot;,{{&quot;Column1&quot;, type text}, {&quot;Column2&quot;, type any}, {&quot;Column3&quot;, type any}, {&quot;Column4&quot;, type any}, {&quot;Column5&quot;, type any}, {&quot;Column6&quot;, type any}, {&quot;Column7&quot;, type any}, {&quot;Column8&quot;, type any}, {&quot;Column9&quot;, type any}, {&quot;Column10&quot;, type any}, {&quot;Column11&quot;, type any}}),&#13;&#10;    #&quot;Removed Top Rows&quot; = Table.Skip(#&quot;Changed Type1&quot;,1)&#13;&#10;in&#13;&#10;  #&quot;Removed Top Rows&quot;]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;Query Name=&quot;master_data_futf&quot;&gt;&lt;Formula&gt;&lt;![CDATA[let&#13;&#10;  Source = Excel.CurrentWorkbook(){[Name = &quot;dynpath_futf&quot;]}[Content],&#13;&#10;  Path = Source{0}[FullPath] ,&#13;&#10;  GetFiles = Csv.Document(File.Contents(Path),[Delimiter=&quot;,&quot;, Columns=191, Encoding=1252, QuoteStyle=QuoteStyle.None]),&#13;&#10;    #&quot;Promoted Headers&quot; = Table.PromoteHeaders(GetFiles, [PromoteAllScalars=true]),&#13;&#10;    #&quot;Market Filters (Optimized)&quot; = Table.SelectRows(#&quot;Promoted Headers&quot;, each ([Market_and_Exchange_Names] = &quot;BITCOIN - CHICAGO MERCANTILE EXCHANGE&quot; or [Market_and_Exchange_Names] = &quot;E-MINI S&amp;P 500 - CHICAGO MERCANTILE EXCHANGE&quot; or [Market_and_Exchange_Names] = &quot;EURO FX - CHICAGO MERCANTILE EXCHANGE&quot; or [Market_and_Exchange_Names] = &quot;EURO FX - CHICAGO MERCANTILE EXCHANGE &quot; or [Market_and_Exchange_Names] = &quot;MICRO BITCOIN - CHICAGO MERCANTILE EXCHANGE&quot; or [Market_and_Exchange_Names] = &quot;S&amp;P 500 Consolidated - CHICAGO MERCANTILE EXCHANGE&quot; or [Market_and_Exchange_Names] = &quot;S&amp;P 500 Consolidated - CHICAGO MERCANTILE EXCHANGE &quot;)),&#13;&#10;    #&quot;Changed Type&quot; = Table.TransformColumnTypes(#&quot;Market Filters (Optimized)&quot;,{{&quot;Market_and_Exchange_Names&quot;, type text}, {&quot;As_of_Date_In_Form_YYMMDD&quot;, Int64.Type}, {&quot;Report_Date_as_MM_DD_YYYY&quot;, type date}, {&quot;CFTC_Contract_Market_Code&quot;, Int64.Type}, {&quot;CFTC_Market_Code&quot;, type text}, {&quot;CFTC_Region_Code&quot;, Int64.Type}, {&quot;CFTC_Commodity_Code&quot;, Int64.Type}, {&quot;Open_Interest_All&quot;, Int64.Type}, {&quot;Dealer_Positions_Long_All&quot;, Int64.Type}, {&quot;Dealer_Positions_Short_All&quot;, Int64.Type}, {&quot;Dealer_Positions_Spread_All&quot;, Int64.Type}, {&quot;Asset_Mgr_Positions_Long_All&quot;, Int64.Type}, {&quot;Asset_Mgr_Positions_Short_All&quot;, Int64.Type}, {&quot;Asset_Mgr_Positions_Spread_All&quot;, Int64.Type}, {&quot;Lev_Money_Positions_Long_All&quot;, Int64.Type}, {&quot;Lev_Money_Positions_Short_All&quot;, Int64.Type}, {&quot;Lev_Money_Positions_Spread_All&quot;, Int64.Type}, {&quot;Other_Rept_Positions_Long_All&quot;, Int64.Type}, {&quot;Other_Rept_Positions_Short_All&quot;, Int64.Type}, {&quot;Other_Rept_Positions_Spread_All&quot;, Int64.Type}, {&quot;Tot_Rept_Positions_Long_All&quot;, Int64.Type}, {&quot;Tot_Rept_Positions_Short_All&quot;, Int64.Type}, {&quot;NonRept_Positions_Long_All&quot;, Int64.Type}, {&quot;NonRept_Positions_Short_All&quot;, Int64.Type}, {&quot;Change_in_Open_Interest_All&quot;, type text}, {&quot;Change_in_Dealer_Long_All&quot;, type text}, {&quot;Change_in_Dealer_Short_All&quot;, type text}, {&quot;Change_in_Dealer_Spread_All&quot;, type text}, {&quot;Change_in_Asset_Mgr_Long_All&quot;, type text}, {&quot;Change_in_Asset_Mgr_Short_All&quot;, type text}, {&quot;Change_in_Asset_Mgr_Spread_All&quot;, type text}, {&quot;Change_in_Lev_Money_Long_All&quot;, type text}, {&quot;Change_in_Lev_Money_Short_All&quot;, type text}, {&quot;Change_in_Lev_Money_Spread_All&quot;, type text}, {&quot;Change_in_Other_Rept_Long_All&quot;, type text}, {&quot;Change_in_Other_Rept_Short_All&quot;, type text}, {&quot;Change_in_Other_Rept_Spread_All&quot;, type text}, {&quot;Change_in_Tot_Rept_Long_All&quot;, type text}, {&quot;Change_in_Tot_Rept_Short_All&quot;, type text}, {&quot;Change_in_NonRept_Long_All&quot;, type text}, {&quot;Change_in_NonRept_Short_All&quot;, type text}, {&quot;Pct_of_Open_Interest_All&quot;, Int64.Type}, {&quot;Pct_of_OI_Dealer_Long_All&quot;, type number}, {&quot;Pct_of_OI_Dealer_Short_All&quot;, type number}, {&quot;Pct_of_OI_Dealer_Spread_All&quot;, type number}, {&quot;Pct_of_OI_Asset_Mgr_Long_All&quot;, type number}, {&quot;Pct_of_OI_Asset_Mgr_Short_All&quot;, type number}, {&quot;Pct_of_OI_Asset_Mgr_Spread_All&quot;, type number}, {&quot;Pct_of_OI_Lev_Money_Long_All&quot;, type number}, {&quot;Pct_of_OI_Lev_Money_Short_All&quot;, type number}, {&quot;Pct_of_OI_Lev_Money_Spread_All&quot;, type number}, {&quot;Pct_of_OI_Other_Rept_Long_All&quot;, type number}, {&quot;Pct_of_OI_Other_Rept_Short_All&quot;, type number}, {&quot;Pct_of_OI_Other_Rept_Spread_All&quot;, type number}, {&quot;Pct_of_OI_Tot_Rept_Long_All&quot;, type number}, {&quot;Pct_of_OI_Tot_Rept_Short_All&quot;, type number}, {&quot;Pct_of_OI_NonRept_Long_All&quot;, type number}, {&quot;Pct_of_OI_NonRept_Short_All&quot;, type number}, {&quot;Traders_Tot_All&quot;, Int64.Type}, {&quot;Traders_Dealer_Long_All&quot;, type text}, {&quot;Traders_Dealer_Short_All&quot;, Int64.Type}, {&quot;Traders_Dealer_Spread_All&quot;, type text}, {&quot;Traders_Asset_Mgr_Long_All&quot;, type text}, {&quot;Traders_Asset_Mgr_Short_All&quot;, type text}, {&quot;Traders_Asset_Mgr_Spread_All&quot;, type text}, {&quot;Traders_Lev_Money_Long_All&quot;, type text}, {&quot;Traders_Lev_Money_Short_All&quot;, type text}, {&quot;Traders_Lev_Money_Spread_All&quot;, type text}, {&quot;Traders_Other_Rept_Long_All&quot;, type text}, {&quot;Traders_Other_Rept_Short_All&quot;, type text}, {&quot;Traders_Other_Rept_Spread_All&quot;, type text}, {&quot;Traders_Tot_Rept_Long_All&quot;, Int64.Type}, {&quot;Traders_Tot_Rept_Short_All&quot;, Int64.Type}, {&quot;Conc_Gross_LE_4_TDR_Long_All&quot;, type number}, {&quot;Conc_Gross_LE_4_TDR_Short_All&quot;, type number}, {&quot;Conc_Gross_LE_8_TDR_Long_All&quot;, type number}, {&quot;Conc_Gross_LE_8_TDR_Short_All&quot;, type number}, {&quot;Conc_Net_LE_4_TDR_Long_All&quot;, type number}, {&quot;Conc_Net_LE_4_TDR_Short_All&quot;, type number}, {&quot;Conc_Net_LE_8_TDR_Long_All&quot;, type number}, {&quot;Conc_Net_LE_8_TDR_Short_All&quot;, type number}, {&quot;Contract_Units&quot;, type text}, {&quot;CFTC_Contract_Market_Code_Quotes&quot;, Int64.Type}, {&quot;CFTC_Market_Code_Quotes&quot;, type text}, {&quot;CFTC_Commodity_Code_Quotes&quot;, Int64.Type}, {&quot;CFTC_SubGroup_Code&quot;, type text}, {&quot;FutOnly_or_Combined&quot;, type text}}),&#13;&#10;    #&quot;Removed Errors&quot; = Table.RemoveRowsWithErrors(#&quot;Changed Type&quot;, {&quot;Report_Date_as_MM_DD_YYYY&quot;}),&#13;&#10;    #&quot;Removed Other Columns&quot; = Table.SelectColumns(#&quot;Removed Errors&quot;,{&quot;Market_and_Exchange_Names&quot;, &quot;Report_Date_as_MM_DD_YYYY&quot;, &quot;Dealer_Positions_Long_All&quot;, &quot;Dealer_Positions_Short_All&quot;, &quot;Asset_Mgr_Positions_Long_All&quot;, &quot;Asset_Mgr_Positions_Short_All&quot;, &quot;Asset_Mgr_Positions_Spread_All&quot;, &quot;Lev_Money_Positions_Long_All&quot;, &quot;Lev_Money_Positions_Short_All&quot;, &quot;Other_Rept_Positions_Long_All&quot;, &quot;Other_Rept_Positions_Short_All&quot;}),&#13;&#10;    #&quot;Lookback Period Filter&quot; = Table.SelectRows(#&quot;Removed Other Columns&quot;, each Date.IsInPreviousNWeeks([Report_Date_as_MM_DD_YYYY], 78)),&#13;&#10;    #&quot;Demoted Headers&quot; = Table.DemoteHeaders(#&quot;Lookback Period Filter&quot;),&#13;&#10;    #&quot;Changed Type1&quot; = Table.TransformColumnTypes(#&quot;Demoted Headers&quot;,{{&quot;Column1&quot;, type text}, {&quot;Column2&quot;, type any}, {&quot;Column3&quot;, type any}, {&quot;Column4&quot;, type any}, {&quot;Column5&quot;, type any}, {&quot;Column6&quot;, type any}, {&quot;Column7&quot;, type any}, {&quot;Column8&quot;, type any}, {&quot;Column9&quot;, type any}, {&quot;Column10&quot;, type any}, {&quot;Column11&quot;, type any}}),&#13;&#10;    #&quot;Removed Top Rows&quot; = Table.Skip(#&quot;Changed Type1&quot;,1)&#13;&#10;in&#13;&#10;    #&quot;Removed Top Rows&quot;]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;/Items&gt;&lt;/Mashup&gt;</odc:PowerQueryMashupData>
 </odc:OfficeDataConnection>
</xml>
<style>
<!--
    .ODCDataSource
    {
    behavior: url(dataconn.htc);
    }
-->
</style>
 
</head>

<body onload='init()' scroll=no leftmargin=0 topmargin=0 rightmargin=0 style='border: 0px'>
<table style='border: solid 1px threedface; height: 100%; width: 100%' cellpadding=0 cellspacing=0 width='100%'> 
  <tr> 
    <td id=tdName style='font-family:arial; font-size:medium; padding: 3px; background-color: threedface'> 
      &nbsp; 
    </td> 
     <td id=tdTableDropdown style='padding: 3px; background-color: threedface; vertical-align: top; padding-bottom: 3px'>

      &nbsp; 
    </td> 
  </tr> 
  <tr> 
    <td id=tdDesc colspan='2' style='border-bottom: 1px threedshadow solid; font-family: Arial; font-size: 1pt; padding: 2px; background-color: threedface'>

      &nbsp; 
    </td> 
  </tr> 
  <tr> 
    <td colspan='2' style='height: 100%; padding-bottom: 4px; border-top: 1px threedhighlight solid;'> 
      <div id='pt' style='height: 100%' class='ODCDataSource'></div> 
    </td> 
  </tr> 
</table> 

  
<script language='javascript'> 

function init() { 
  var sName, sDescription; 
  var i, j; 
  
  try { 
    sName = unescape(location.href) 
  
    i = sName.lastIndexOf(".") 
    if (i>=0) { sName = sName.substring(1, i); } 
  
    i = sName.lastIndexOf("/") 
    if (i>=0) { sName = sName.substring(i+1, sName.length); } 

    document.title = sName; 
    document.getElementById("tdName").innerText = sName; 

    sDescription = document.getElementById("docprops").innerHTML; 
  
    i = sDescription.indexOf("escription>") 
    if (i>=0) { j = sDescription.indexOf("escription>", i + 11); } 

    if (i>=0 && j >= 0) { 
      j = sDescription.lastIndexOf("</", j); 

      if (j>=0) { 
          sDescription = sDescription.substring(i+11, j); 
        if (sDescription != "") { 
            document.getElementById("tdDesc").style.fontSize="x-small"; 
          document.getElementById("tdDesc").innerHTML = sDescription; 
          } 
        } 
      } 
    } 
  catch(e) { 

    } 
  } 
</script> 

</body> 
 
</html>
